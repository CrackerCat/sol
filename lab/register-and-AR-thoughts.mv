sub = function x y:
  return x - y

main = function:
  x = 10
  while x > 0:
    x = sub(x 1)

# VM instructions
function sub    # args: x=R(0), y=R(1)
  SUB 0 0 1     # R(0) = R(0) - R(1)
  RETURN 0 1    # <- R(0)...R(0+1-1) = R(0)..R(0) = R(0)
function main   # k=10,0,1,"sub"
  LOADK 0 0     # R(0) = K(0) = <const 10>
  LT 0 0 257    # (0 == R(0) < K(1)) ?  ; (r0 >= 0) cont else PC++
  JUMP 5        # PC += 5 to RETURN
  MOVE 1 0      # R(1) = R(0) = <val x>
  GETGLOBAL 0 3 # R(0) = G[K(3)] = G["sub"] = <fun sub>
  LOADK 2 2     # R(2) = K(2) = <const 1>
  CALL 0 2 1    # R(0)(R(1), R(2)) = sub(x 1)
                # Note: R(0) is now <val x> (return value from call)
  JUMP -7       # PC += -7 to LT
  RETURN 0 1    # <- R(0)..R(0+1-1) = R(0)..R(0) = R(0)

CALL A B C -> R(A), ... ,R(A+C-1) := R(A)(R(A+1), ... ,R(A+B))
#             Start, ... Length  =  fun( Start, ...  Length )
# CALL 3 0 0 = 3(4..3) = 3()        -> 3..2 = ()
# CALL 3 3 1 = 3(4..6) = 3(4, 5, 6) -> 3..3 = (v0)
# CALL 3 1 3 = 3(4..4) = 3(4)       -> 3..5 = (v0, v1, v2)

STask
  STask* next
  SActivationRecord* stack_top

SActivationRecord
  SActivationRecord* parent
  SFunc   func
  SInstr* pc
  SValue  registry[]

SFunc
  SValue constants[]
  SInstr instructions[]



# Idea: What if there's no RETURN instruction, but a function implicitly returns
# all its registers? It would be cheap. There could instead be a END instruction
# which marks the end of a program (so sched_exec knows when to stop). Any
# downsides? Maybe the upsides are none?

