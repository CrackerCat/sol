# Figure 1.
# File: Function Line           # Control flow> Instruction
# -----------------------------   -------------------------------------------------------------
foo.sol:                        # sched> T1 = Task(bar/main)
    three = ^{                  # T1/main:1>   MOVEK R(0) = K(0) = V(1200.0)
 1    print "Timeout completed" # T1/main:2.1> SLEEP delay=RK(0) retreg=1
 2    return                    # sched> suspend and unschedule T1, start_timer(T1, delay)
    }                           # sched> schedule other tasks ...timer_expired: resume(T1)
bar.sol:                        # T1/main:2.2> EQ RK(1) RK(255+1) PC++ else continue
    import foo                  # T1/main:2.3> JUMP 0
    main = ^{                   # T1/main:3.1> MOVEK R(1) = K(1) (value bar/two)
 1    delay = 1200              # T1/main:3.2> CALL 1 0 0 ; R(1)(R(2)..R(0))
 2    if ((sleep delay) == 0)   # T1/two:1.1> MOVEK R(1) = K(2) (value foo)
 3      two()                   # T1/two:1.2> GETTABLE R(1) = R(1)[RK(2)] where RK(2) = "three"
 4    sleep 500                 # T1/two:1.3> CALL 1 0 0 ; R(1)(R(2)..R(0))
 5    return                    # T1/three:1.1> MOVEK R(0) = K(0) (value print)
    }                           # T1/three:1.1> MOVEK R(1) = K(1) ("Timeout completed")
    two = ^{                    # T1/three:1.2> CALL 0 2 0 ; R(0)(R(1)..R(1))
 1    foo.three()               # print> ... eventually print returns
 2    return                    # T1/three:2> RETURN
    }                           # T1/two:2> RETURN
                                # T1/main:4.1> MOVEK R(0) = K(2) = V(500.0)
                                # T1/main:4.2> SLEEP delay=RK(0) retreg=1
                                # sched> suspend and unschedule T1, start_timer(T1, delay)
                                # sched> schedule other tasks ...timer_expired: resume(T1)
                                # T1/main:5> RETURN
                                # sched> idle trap

# Figure 2.1. Skip the next instruction when the test succeeds
1  if x == y  # 1  if (RK(B) == RK(C)) PC++ (to 3) else continue (to 2)
              # 2  JUMP 3 (to 6)
2    do a     # 3  do a
3    do b     # 4  do b
4    do c     # 5  do c
5  else       # 6  JUMP 2 (to 9)
6    do e     # 7  do e
7    do f     # 8  do f
8  return     # 9  RETURN

# Figure 2.2. Skip the next instruction when the test fails
1  if x == y  # 1  if (RK(B) != RK(C)) continue (to 2) else PC++ (to 3)
              # 2  JUMP 3 (to 6)
2    do a     # 3  do a
3    do b     # 4  do b
4    do c     # 5  do c
5  else       # 6  JUMP 2 (to 9)
6    do e     # 7  do e
7    do f     # 8  do f
8  return     # 9  RETURN

# Figure 3. Lua-style CALL instruction
CALL A B C -> R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1))

# Figure 4.1. As "sleep" returns the time remaining to sleep when the timer was
# interrupted, we can implement "retry" just like in regular C:
delay = 2000
while delay > 0
  if ((delay = sleep delay) > 0)
    print "Sleep was interrupted. Sleeping again..."

# Figure 4.2. Figure 4.1 Expands to:
MOVEK R(0) = K(0)              # where K(0) = 2000.0
SLEEP delay=RK(0) retreg=1     # sleep for RK(0) and put remaining time in R(1)
<sched... on timer-expired, store remaining time in R(retreg) and resume T>
LT    RK(255+1) RK(1)          # if (K(1) < R(1)) continue else PC++
JUMP  3                        # to RETURN
MOVEK R(2) = K(2)              # R(2) = function "print"
CALL  R(2) RK(255+3) RK(255+3) # print K(3)..K(3) where K3() = "Sleep was i..."
JUMP  -6                       # to SLEEP
RETURN

